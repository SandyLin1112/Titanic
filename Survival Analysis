import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np
import math
from scipy.stats import chi2_contingency

df_train = pd.read_csv("train.csv")

print(df_train.info())
print(df_train.describe())

#資料分組
bins = range(0, 101, 10)  
labels = [f"{i}-{i+10}" for i in bins[:-1]]  
df_train["AgeGroup"] = pd.cut(
    df_train["Age"], bins=bins, labels=labels, right=False)
df_train["Cabin_Class"] = df_train["Cabin"].str[0]
unique_Cabin_Class = sorted(filter(pd.notna, df_train["Cabin_Class"].unique()))
df_train["Family"] = df_train["Parch"] + df_train["SibSp"]
print(df_train.info())

#處理異常值
##Age的異常值
ages_1 = df_train["Age"]
def age(ages_1):
    change_age = []
    for num in ages_1:
        if math.isnan(num):  
            change_age.append(num)  
            continue
        decimal_part = num - int(num)  
        if decimal_part != 0 and decimal_part % 0.5 != 0:
            change_age.append(int(num) + 0.5)
        else:
            change_age.append(num)  
    return change_age

df_train_modify = df_train.copy()
df_train_modify["Age"] = age(ages_1)

ages_2 = df_train_modify["Age"]
def check_age(ages_2):
    check_change_age = []
    for num in ages_2:
        if math.isnan(num):   
            continue
        decimal_part = num - int(num)  
        if decimal_part != 0 and decimal_part % 0.5 != 0:
            check_change_age.append(num)  
    return check_change_age
print(check_age(ages_2))
print(df_train_modify.describe())

##Fare的異常直
is0_fare = df_train_modify[df_train_modify["Fare"] == 0].shape[0]
print(is0_fare)

df_train_modify_fare = df_train_modify.drop(df_train_modify[df_train_modify["Fare"] == 0].index).copy()
check_is0_fare = df_train_modify_fare[df_train_modify_fare["Fare"] == 0].shape[0]
print(check_is0_fare)


#數據分析+視覺化
colors = ['#26ABF2', '#FF5B57','#25B544']
label_survied = ['0 (Unsurvived)', '1 (Survived)']
explode = (0.1, 0)

##總體分析
###總體中倖存/罹難的總數（長條圖）
ax_1 = sns.countplot(x='Survived', data=df_train_modify, palette=colors) 
plt.title("Number of Survived")
plt.legend(labels=['0 (Unsurvived)', '1 (Survived)'])
for p in ax_1.patches:
    ax_1.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,           
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12)
plt.yticks(range(0, 700, 100))
plt.grid()
ax_1.set_axisbelow(True)
plt.show()
plt.clf()

###總體中倖存/罹難的比例（圓餅圖）
total_survived = df_train_modify["Survived"].sum()
total_passenger = df_train_modify["PassengerId"].max()
total_unsurvived = total_passenger - total_survived
size_survived = [total_unsurvived, total_survived]
ax_2 = plt.pie( 
    size_survived,
    labels=label_survied, 
    colors=colors, 
    autopct='%1.1f%%',
    startangle=90, 
    explode=explode,  
)
plt.title("Survival Rate")
#plt.show()
plt.clf()

##性別分析
###分析性別中倖存/罹難的總數與比例（長條圖+折線圖）
categories = ["male","female"]
total_survived_sex = df_train_modify[df_train_modify["Survived"] == 1]["Sex"].value_counts()
total_unsurvived_sex = df_train_modify[df_train_modify["Survived"] == 0]["Sex"].value_counts()
total_survived_sex = total_survived_sex.reindex(categories, fill_value=0)
total_unsurvived_sex = total_unsurvived_sex.reindex(categories, fill_value=0)
unsurvived_counts_sex = [total_unsurvived_sex.get(i, 0) for i in categories]
survived_counts_sex = [total_survived_sex.get(i, 0) for i in categories]
survival_rate_sex = total_survived_sex / (total_survived_sex + total_unsurvived_sex)
plt.figure()
x = np.arange(len(categories))
ax = plt.gca()
ax_7_1 = ax.bar(x - 0.2, unsurvived_counts_sex, width=0.4, color="#26ABF2")
ax_7_2 = ax.bar(x + 0.2, survived_counts_sex, width=0.4, color="#FF5B57")
plt.xticks(x, ["Male","Female"])  
plt.yticks(range(0,600,50))
plt.xlabel("Gender")
plt.legend(labels=label_survied, loc="upper center")
plt.title("Number of Survived by Gender")
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:3]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[3:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_7_3 = ax.twinx()  
ax_7_3.plot(x, survival_rate_sex, marker="o", color="#548235", label="Survival Rate")
ax_7_3.set_ylabel("Survival Rate")
for i, rate in enumerate(survival_rate_sex):
    if not np.isnan(rate):  
        ax_7_3.annotate(
            f"{rate * 100:.2f}%", 
            (x[i], rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green"
        )
ax_7_3.legend()
plt.show()
plt.clf()

###分析倖存/罹難中性別的比例（圓餅圖）
survived_unique = sorted(df_train_modify["Survived"].unique())
fig, ax_9 = plt.subplots(1, len(survived_unique), figsize=(10, 6))
for i, survived in enumerate(survived_unique):
    total_female_survived = df_train_modify[(df_train_modify["Sex"] == "female") & (df_train_modify["Survived"] == survived)].shape[0]
    total_male_survived = df_train_modify[(df_train_modify["Sex"] == "male") & (df_train_modify["Survived"] == survived)].shape[0]
    sizes = [total_male_survived, total_female_survived]
   
    ax_9[i].pie(
        sizes,
        labels=["Male", "Female"],
        colors=colors,
        autopct='%1.1f%%',
        startangle=90,
        explode=explode,
    )
    ax_9[i].set_title(f"{survived}")

plt.suptitle("Gender Ratio by Survival")
plt.tight_layout()
plt.show()
plt.clf()

##年齡分析
###分析年齡中倖存/罹難的總數與比例（長條圖+折線圖）
total_survived_age = df_train_modify[df_train_modify["Survived"] == 1]["Age"]
total_unsurvived_age = df_train_modify[df_train_modify["Survived"] == 0]["Age"]
ax_10_1 = plt.hist(total_unsurvived_age, bins=50, range=(0, 99), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_10_2 = plt.hist(total_survived_age, bins=50, range=(0, 99), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks([i * 10 for i in range(0, 11)])
plt.yticks([i * 10 for i in range(0, 5)])
plt.xlabel("Age")
plt.title("Age Distributions of Survival")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
plt.show()
plt.clf()

###處理年齡缺失值-Fill Median
median_age = df_train_modify['Age'].median()
df_train_modify_age = df_train_modify.copy()
df_train_modify_age["Age"] = df_train_modify_age['Age'].fillna(median_age)
#print(df_train_modify_age.describe())

###年齡分析-Fill Median
total_survived_age_median = df_train_modify_age[df_train_modify_age["Survived"] == 1]["Age"]
total_unsurvived_age_median = df_train_modify_age[df_train_modify_age["Survived"] == 0]["Age"]
ax_11_1 = plt.hist(total_unsurvived_age_median, bins=50, range=(0, 99), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_11_2 = plt.hist(total_survived_age_median, bins=50, range=(0, 99), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks(range(0, 101, 10))
plt.yticks(range(0, 170, 10))
plt.xlabel("Age")
plt.title("Age Distributions of Survival (Fill Missing Values)")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
plt.show()
plt.clf()

###處理年齡缺失值-Fill Median GroupBy
df_train_modify_age_groupby = df_train_modify.copy()
median_by_group = df_train_modify_age_groupby.groupby(['Pclass', 'Sex','Survived'])['Age'].median()
median_by_group_sum = df_train_modify_age_groupby.groupby(['Pclass', 'Sex','Survived']).agg(
    Median=('Age', 'median'),
    Count=('Age', 'count'),    
    )  
null_count_by_group = df_train_modify.groupby(['Pclass', 'Sex', 'Survived'])['Age'].apply(lambda x: x.isna().sum())
print(null_count_by_group)

def fill_age_grouped(row):
    if pd.isna(row['Age']):
        return median_by_group[row['Pclass'], row['Sex'], row['Survived']]
    return row['Age']

df_train_modify_age_groupby['Age'] = df_train_modify_age_groupby.apply(fill_age_grouped, axis=1)
print(df_train_modify_age_groupby.describe())

median_by_group_sum = df_train_modify_age_groupby.groupby(['Pclass', 'Sex','Survived']).agg(
    Median=('Age', 'median'),
    Count=('Age', 'count'),    
    )  
print(median_by_group_sum)

###年齡分析-Fill Median GroupBy
total_survived_age_median_groupby = df_train_modify_age_groupby[df_train_modify_age_groupby["Survived"] == 1]["Age"]
total_unsurvived_age_median_groupby = df_train_modify_age_groupby[df_train_modify_age_groupby["Survived"] == 0]["Age"]
ax_14_1 = plt.hist(total_unsurvived_age_median_groupby, bins=50, range=(0, 99), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_14_2 = plt.hist(total_survived_age_median_groupby, bins=50, range=(0, 99), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks(range(0, 101, 10))
plt.yticks(range(0, 130, 10))
plt.xlabel("Age")
plt.title("Age Distributions of Survival (Fill Missing Values by Group)")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
plt.show()
plt.clf()

###分析年齡區間的分布
plt.figure()
ax_12_1 = plt.hist(total_unsurvived_age, bins=10, range=(0, 100), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_12_2 = plt.hist(total_survived_age, bins=10, range=(0, 100), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks(range(0, 101, 10))
plt.yticks(range(0, 290, 10))
plt.xlabel("AgeGroup")
plt.title("AgeGroup Distributions of Survival")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True)
for i, p in enumerate(ax.patches[:10]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[10:11]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
for i, p in enumerate(ax.patches[11:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() - 5,          
            int(p.get_height()),            
            ha='center', va='top', fontsize=12, color="red")
plt.show()
plt.clf()

###年齡區間分析-Fill Median GroupBy
plt.figure()
ax_15_1 = plt.hist(total_unsurvived_age_median_groupby, bins=10, range=(0, 100), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_15_2 = plt.hist(total_survived_age_median_groupby, bins=10, range=(0, 100), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks(range(0, 101, 10))
plt.yticks(range(0, 290, 10))
plt.xlabel("AgeGroup")
plt.title("AgeGroup Distributions of Survival (Fill Missing Values by Group)")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:10]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[10:11]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
for i, p in enumerate(ax.patches[11:12]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 7,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
for i, p in enumerate(ax.patches[12:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() - 5,          
            int(p.get_height()),            
            ha='center', va='top', fontsize=12, color="red")
plt.show()
plt.clf()

##Parch分析
###分析Parch中倖存/罹難的總數與比例（長條圖+折線圖）
categories = range(0,11)
total_survived_parch = df_train_modify[df_train_modify["Survived"] == 1]["Parch"].value_counts()
total_unsurvived_parch = df_train_modify[df_train_modify["Survived"] == 0]["Parch"].value_counts()
total_survived_parch = total_survived_parch.reindex(categories, fill_value=0)
total_unsurvived_parch = total_unsurvived_parch.reindex(categories, fill_value=0)
unsurvived_counts_parch = [total_unsurvived_parch.get(i, 0) for i in categories]
survived_counts_parchp = [total_survived_parch.get(i, 0) for i in categories]
survival_rate_parch = total_survived_parch / (total_survived_parch + total_unsurvived_parch)
plt.figure()
x = np.arange(len(categories))
ax_16_1 = plt.bar(x - 0.2, unsurvived_counts_parch, width=0.4, color="#26ABF2")
ax_16_2 = plt.bar(x + 0.2, survived_counts_parchp, width=0.4, color="#FF5B57")
plt.xticks(x, categories)  
plt.yticks(range(0,500,50))
plt.xlabel("Parch")
plt.title("Number of Survived by Parch")
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:10]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[10:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_16_3 = ax.twinx()  
ax_16_3.plot(categories, survival_rate_parch, marker="o", color="#548235", label="Survival Rate")
ax_16_3.set_ylabel("Survival Rate")
for i, (x_pos, rate) in enumerate(zip(categories, survival_rate_parch)):
    if not np.isnan(rate):  
        ax_16_3.annotate(
            f"{rate * 100:.2f}%", 
            (x_pos, rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green"
        )
plt.show()
plt.clf()

##SibSp分析
###分析SibSp中倖存/罹難的總數與比例（長條圖+折線圖）
total_survived_sibsp = df_train_modify[df_train_modify["Survived"] == 1]["SibSp"].value_counts()
total_unsurvived_sibsp = df_train_modify[df_train_modify["Survived"] == 0]["SibSp"].value_counts()
total_survived_sibsp = total_survived_sibsp.reindex(categories, fill_value=0)
total_unsurvived_sibsp = total_unsurvived_sibsp.reindex(categories, fill_value=0)
unsurvived_counts_sibsp = [total_unsurvived_sibsp.get(i, 0) for i in categories]
survived_counts_sibsp = [total_survived_sibsp.get(i, 0) for i in categories]
survival_rate_sibsp = total_survived_sibsp / (total_survived_sibsp + total_unsurvived_sibsp)
plt.figure()
x = np.arange(len(categories))
ax_17_1 = plt.bar(x - 0.2, unsurvived_counts_sibsp, width=0.4, color="#26ABF2")
ax_17_2 = plt.bar(x + 0.2, survived_counts_sibsp, width=0.4, color="#FF5B57")
plt.xticks(x, categories)  
plt.xlabel("SibSp")
plt.title("Number of Survived by SibSp")
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:10]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[10:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_17_3 = ax.twinx()  
ax_17_3.plot(categories, survival_rate_sibsp, marker="o", color="#548235", label="Survival Rate")
ax_17_3.set_ylabel("Survival Rate")
for i, (x_pos, rate) in enumerate(zip(categories, survival_rate_sibsp)):
    if not np.isnan(rate):  
        ax_17_3.annotate(
            f"{rate * 100:.2f}%", 
            (x_pos, rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green"
        )
plt.show()
plt.clf()

##Family分析
###分析Family中倖存/罹難的總數與比例（長條圖+折線圖）
total_survived_family = df_train_modify[df_train_modify["Survived"] == 1]["Family"].value_counts()
total_unsurvived_family = df_train_modify[df_train_modify["Survived"] == 0]["Family"].value_counts()
total_survived_family = total_survived_family.reindex(categories, fill_value=0)
total_unsurvived_family = total_unsurvived_family.reindex(categories, fill_value=0)
unsurvived_counts_family = [total_unsurvived_family.get(i, 0) for i in categories]
survived_counts_family = [total_survived_family.get(i, 0) for i in categories]
survival_rate_family = total_survived_family / (total_survived_family + total_unsurvived_family)
plt.figure()
x = np.arange(len(categories))
ax_18_1 = plt.bar(x - 0.2, unsurvived_counts_family, width=0.4, color="#26ABF2")
ax_18_2 = plt.bar(x + 0.2, survived_counts_family, width=0.4, color="#FF5B57")
plt.xticks(x, categories)  
plt.yticks(range(0,400,50))
plt.xlabel("Family")
plt.title("Number of Survived by Family")
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:11]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[11:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_18_3 = ax.twinx()  
ax_18_3.plot(categories, survival_rate_family, marker="o", color="#548235", label="Survival Rate")
ax_18_3.set_ylabel("Survival Rate")
for i, (x_pos, rate) in enumerate(zip(categories, survival_rate_family)):
    if not np.isnan(rate):  
        ax_18_3.annotate(
            f"{rate * 100:.2f}%", 
            (x_pos, rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green"
        )
plt.show()
plt.clf()

###分析Family與Age
###分析Family中倖存/罹難的Age分布（箱型圖）
plt.figure(figsize=(10, 6))
ax_23 = sns.boxplot(data=df_train_modify, x='Family', y='Age', hue='Survived', palette=colors)
plt.title('Age Distribution by Family and Survived')
plt.ylabel('Age')
plt.xlabel('Family')
plt.legend(title='Survived')
plt.show()
plt.clf()

##社會經濟地位分析
###分析Pclass中倖存/罹難的總數與比例（長條圖+折線圖）
categories = [1, 2, 3]
total_survived_pclass = df_train_modify[df_train_modify["Survived"] == 1]["Pclass"].value_counts()
total_unsurvived_pclass = df_train_modify[df_train_modify["Survived"] == 0]["Pclass"].value_counts()
total_survived_pclass = total_survived_pclass.reindex(categories, fill_value=0)
total_unsurvived_pclass = total_unsurvived_pclass.reindex(categories, fill_value=0)
unsurvived_counts_pclass = [total_unsurvived_pclass.get(i, 0) for i in categories]
survived_counts_pclass = [total_survived_pclass.get(i, 0) for i in categories]
survival_rate_pclass = total_survived_pclass / (total_survived_pclass + total_unsurvived_pclass)
plt.figure()
x = np.arange(len(categories))
bar_width = 0.4
ax = plt.gca()
ax_5_1 = ax.bar(x - 0.2, unsurvived_counts_pclass, width=0.4, color="#26ABF2")
ax_5_2 = ax.bar(x + 0.2, survived_counts_pclass, width=0.4, color="#FF5B57")
plt.xticks(x, categories)  
plt.yticks(range(0,450,50))
plt.xlabel("Pclass")
plt.legend(labels=label_survied, loc="center left")
plt.title("Number of Survived by Pclass")
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:3]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[3:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_5_3 = ax.twinx()  
ax_5_3.plot(x, survival_rate_pclass, marker="o", color="#548235", label="Survival Rate")
ax_5_3.set_ylabel("Survival Rate")
for i, rate in enumerate(survival_rate_pclass):
    if not np.isnan(rate):  
        ax_5_3.annotate(
            f"{rate * 100:.2f}%", 
            (x[i], rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green"
        )
ax_5_3.legend(loc="upper center")
plt.show()
plt.clf()

##Fare分析
###分析Fare中倖存/罹難的分布（直方圖）
total_survived_fare = df_train_modify_fare[df_train_modify_fare["Survived"] == 1]["Fare"]
total_unsurvived_fare = df_train_modify_fare[df_train_modify_fare["Survived"] == 0]["Fare"]
plt.figure()
ax_19_1 = plt.hist(total_unsurvived_fare, bins=50, range=(0, 100), alpha=0.7, color="#26ABF2", label="Unsurvived")
ax_19_2 = plt.hist(total_survived_fare, bins=50, range=(0, 100), alpha=0.5, color="#FF5B57", label="Survived")
plt.xticks(range(0, 110, 10))
plt.yticks(range(0, 190, 10))
plt.xlabel("Fare")
plt.title("Fare Distributions of Survival")
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
plt.show()
plt.clf()

##Cabin分析
###分析Cabin中倖存/罹難的總數與比例（長條圖+折線圖）
df_train_modify_cabin = df_train_modify.dropna(subset=["Cabin"]).copy()
categories = sorted(df_train_modify_cabin["Cabin_Class"].unique())
total_survived_cabin = df_train_modify_cabin[df_train_modify_cabin["Survived"] == 1]["Cabin_Class"].value_counts()
total_unsurvived_cabin = df_train_modify_cabin[df_train_modify_cabin["Survived"] == 0]["Cabin_Class"].value_counts()
total_survived_cabin = total_survived_cabin.reindex(categories, fill_value=0)
total_unsurvived_cabin = total_unsurvived_cabin.reindex(categories, fill_value=0)
unsurvived_counts_cabin = [total_unsurvived_cabin.get(i, 0) for i in categories]
survived_counts_cabin = [total_survived_cabin.get(i, 0) for i in categories]
survival_rate_cabin = total_survived_cabin / (total_survived_cabin + total_unsurvived_cabin)
plt.figure()
x = np.arange(len(categories))
ax_20_1 = plt.bar(x - 0.2, unsurvived_counts_cabin, width=0.4, color="#26ABF2")
ax_20_2 = plt.bar(x + 0.2, survived_counts_cabin, width=0.4, color="#FF5B57")
plt.xticks(x, categories)  
plt.yticks(range(0,45,5))
plt.xlabel("Cabin")
plt.title("Number of Survived by Cabin")
plt.legend(labels=label_survied)
ax = plt.gca()  
ax.grid(zorder=0)  
ax.set_axisbelow(True) 
for i, p in enumerate(ax.patches[:8]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="blue")
for i, p in enumerate(ax.patches[8:]):
    if p.get_height() > 0:
        ax.text(p.get_x() + p.get_width() / 2,  
            p.get_height() + 0.1,          
            int(p.get_height()),            
            ha='center', va='bottom', fontsize=12, color="red")
ax_20_3 = ax.twinx()  
ax_20_3.plot(categories, survival_rate_cabin, marker="o", color="#548235", label="Survival Rate")
ax_20_3.set_ylabel("Survival Rate")
for i, (x_pos, rate) in enumerate(zip(categories, survival_rate_cabin)):
    if not np.isnan(rate):  
        ax_20_3.annotate(
            f"{rate * 100:.2f}%", 
            (x_pos, rate), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha='center', fontsize=10, color="green")
plt.show()
plt.clf()

##分析Fare、Cabin、Pclass
df_train_modify_fare['Cabin_Class'] = df_train_modify['Cabin'].fillna('Unknown').map(lambda x: x[0] if x != 'Unknown' else 'Unknown')
grouped_stats = df_train_modify_fare.groupby(['Cabin_Class','Survived' ])['Fare'].agg(['min','max','mean', 'median', 'count']).reset_index()
print(grouped_stats)

###分析Cabin中倖存/罹難的Fare分布（箱型圖）
plt.figure(figsize=(10, 6))
ax_21 = sns.boxplot(data=df_train_modify_fare, x='Cabin_Class', y='Fare', hue='Survived', palette=colors)
plt.title('Fare Distribution by Cabin Class and Survived')
plt.ylabel('Fare')
plt.xlabel('Cabin Class')
plt.legend(title='Survived')
plt.show()
plt.clf()

###分析Pclass中倖存/罹難的Fare分布（箱型圖）
df_train_modify_fare = df_train_modify_fare.sort_values("Cabin_Class")
plt.figure(figsize=(10, 6))
ax_22 = sns.boxplot(data=df_train_modify_fare, x='Pclass', y='Fare', hue='Survived', palette=colors)
plt.title('Fare Distribution by Pclass and Survived')
plt.ylabel('Fare')
plt.xlabel('Pclass')
plt.legend(title='Survived')
plt.show()
plt.clf()
